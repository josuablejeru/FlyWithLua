-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- --                                                                                                 -- --
-- --      D               ''  T                    D    II    T      !!                              -- --
-- --      D               ''  T           EE       D          T      !!                              -- --
-- --    DDD   OO   N NN      TTT         E  E    DDD    II   TTT     !!                              -- --
-- --   D  D  O  O  NN  N      T          EEE    D  D     I    T      !!                              -- --
-- --   D  D  O  O  N   N      T          E      D  D     I    T                                      -- --
-- --    DDD   OO   N   N       TT         EEE    DDD      I    TT    !!                              -- --
-- --                                                                                                 -- --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- FlyWithLua.ini version 2.7.6 build 2018-10-24

-- Where to search for modules.
package.path = table.concat({
    package.path,
    INTERNALS_DIRECTORY .. "?.lua",
    INTERNALS_DIRECTORY .. "?/init.lua",
    MODULES_DIRECTORY .. "?.lua",
    MODULES_DIRECTORY .. "?/init.lua",
}, ";")
package.cpath = table.concat({
    package.cpath,
    INTERNALS_DIRECTORY .. "?.ext",
    MODULES_DIRECTORY .. "?.ext",
}, ";")

-- Produce a correct name pattern for binary modules for OS and architecture.
-- This resolves clash between OS X and Linux binary modules by requiring "lib"
-- prefix for Linux ones.
local library_pattern = "?_64."

if SYSTEM == "IBM" then
    library_pattern = library_pattern .. "dll"
elseif SYSTEM == "APL" then
    library_pattern = library_pattern .. "so"
else
    library_pattern = "lib" .. library_pattern .. "so"
end

package.cpath = package.cpath:gsub("?.ext", library_pattern)

-- we need an additional library
require "md5"

-- define some constants
XPLM_NAV_NOT_FOUND = -1
xplm_Nav_Unknown = 0
xplm_Nav_Airport = 1
xplm_Nav_NDB = 2
xplm_Nav_VOR = 4
xplm_Nav_ILS = 8
xplm_Nav_Localizer = 16
xplm_Nav_GlideSlope = 32
xplm_Nav_OuterMarker = 64
xplm_Nav_MiddleMarker = 128
xplm_Nav_InnerMarker = 256
xplm_Nav_Fix = 512
xplm_Nav_DME = 1024
xplm_Nav_LatLon = 2048

-- define global datarefs
dataref("LATITUDE", "sim/flightmodel/position/latitude")
dataref("LONGITUDE", "sim/flightmodel/position/longitude")
dataref("ELEVATION", "sim/flightmodel/position/elevation")

-- redefine the print command
function print(...)
    XSBSpeakString(...)
end

-- edit the path variables
AIRCRAFT_PATH = string.sub( AIRCRAFT_PATH, 1, -string.len(AIRCRAFT_FILENAME)-1 )
SCRIPT_DIRECTORY = SCRIPT_DIRECTORY .. DIRECTORY_SEPARATOR

-- create a magic metatable
DATAREF_META_TABLE = {}
DATAREF_META_TABLE.__index = function(t, key) return peek(t.reference, t.reftype, key) end
DATAREF_META_TABLE.__newindex = function(t, key, value) poke(t.reference, t.reftype, key, value) end

-- provide a function to create a magic table for dataref access
function dataref_table( ref_name )
    local t = {}
    t.refname = ref_name
    t.reference = XPLMFindDataRef( ref_name )
    t.reftype = XPLMGetDataRefTypes( t.reference )
    setmetatable( t, DATAREF_META_TABLE )
    return t
end

-- provide a function to create and share a DataRef table
function create_dataref_table(ref_name, ref_type)
	define_shared_dataref(ref_name, ref_type)
	return dataref_table(ref_name)
end

-- Mac version is HID-free at the moment
-- if SYSTEM ~= "APL" then
    -- provide a table of HID devices as a global pre-defined variable
    ALL_HID_DEVICES, NUMBER_OF_HID_DEVICES = create_HID_table()
    logMsg(string.format("FlyWithLua Info: Discovered %i HID devices.", NUMBER_OF_HID_DEVICES))
-- end

-- define a debug function to be called on errors
function FLYWITHLUA_DEBUG()
--    logMsg('FlyWithLua Debug Info: Debug file written to "<<x-plane dir>>/FlyWithLua_Debug.txt".')
	logMsg(string.format('FlyWithLua Debug Info: Debug file written to "%sFlyWithLua_Debug.txt"', SYSTEM_DIRECTORY))
	logMsg(string.format("FlyWithLua Debug Info: Plugin Main directory = %s", PLUGIN_MAIN_DIRECTORY))
	logMsg(string.format("FlyWithLua Debug Info: Script directory = %s", SCRIPT_DIRECTORY))
	logMsg(string.format("FlyWithLua Debug Info: Internals directory = %s", INTERNALS_DIRECTORY))
	logMsg(string.format("FlyWithLua Debug Info: Modules directory = %s", MODULES_DIRECTORY))
    XSBSpeakString('FlyWithLua Debug Info: Debug file written to "<<x-plane dir>>/FlyWithLua_Debug.txt".')
    local debug_file
    debug_file = io.open(SYSTEM_DIRECTORY .. "/FlyWithLua_Debug.txt", "a")
    debug_file:write("\n\n*** All simple global variables Lua knows ***\n")
	local all_global_variables = {}
	local iter = 1
	for n,v in pairs(_G) do
        if (type(v) ~= "function") and (type(v) ~= "table") then
            if n == "XSB_CON_PASSWORD" then
                all_global_variables[iter] = "XSB_CON_PASSWORD = (hidden for personal security)\n"
            elseif n == "XSB_CON_PILOT_ID" then
                all_global_variables[iter] = "XSB_CON_PILOT_ID = (hidden for personal security)\n"
            elseif n == "XSB_CON_REALNAME" then
                all_global_variables[iter] = "XSB_CON_REALNAME = (hidden for personal security)\n"
            else
                all_global_variables[iter] = (tostring(n) .. " = " .. tostring(v) .. "\n")
            end
			iter = iter + 1
        end
	end
	table.sort(all_global_variables)
	if iter > 1 then
		for i = 1, iter-1 do
			debug_file:write(all_global_variables[i])
		end
	end
	all_global_variables = {}
	iter = 1
    debug_file:write("\n\n*** All global tables Lua knows ***\n")
	for n,v in pairs(_G) do
        if type(v) == "table" then
            all_global_variables[iter] = (tostring(n) .. " = " .. tostring(v) .. "\n")
			iter = iter + 1
        end
	end
	table.sort(all_global_variables)
	if iter > 1 then
		for i = 1, iter-1 do
			debug_file:write(all_global_variables[i])
		end
	end
	all_global_variables = {}
	iter = 1
    debug_file:write("\n\n*** All global functions Lua knows ***\n")
	for n,v in pairs(_G) do
        if type(v) == "function" then
            all_global_variables[iter] = (tostring(n) .. " = " .. tostring(v) .. "\n")
			iter = iter + 1
        end
	end
	table.sort(all_global_variables)
	if iter > 1 then
		for i = 1, iter-1 do
			debug_file:write(all_global_variables[i])
		end
	end
	all_global_variables = {}
    -- HID not implemented on Mac versions
    -- if SYSTEM ~= "APL" then
        debug_file:write(string.format("\n\n*** We found %i HID devices ***\n", NUMBER_OF_HID_DEVICES))
        for i, dev in ipairs(ALL_HID_DEVICES) do
            debug_file:write(string.format("\nALL_HID_DEVICES[%i].vendor_id         = %i (%#x)\n", i, dev.vendor_id, dev.vendor_id))
            debug_file:write(string.format("ALL_HID_DEVICES[%i].product_id          = %i (%#x)\n", i, dev.product_id, dev.product_id))
            debug_file:write(string.format("ALL_HID_DEVICES[%i].release_number      = %i (%#x)\n", i, dev.release_number, dev.release_number))
            debug_file:write(string.format("ALL_HID_DEVICES[%i].interface_number    = %i (%#x)\n", i, dev.interface_number, dev.interface_number))
            debug_file:write(string.format("ALL_HID_DEVICES[%i].usage_page          = %i (%#x)", i, dev.usage_page, dev.usage_page))
				if dev.usage_page == 1 then
					debug_file:write(" Generic Desktop Controls\n")
				elseif dev.usage_page == 2 then
					debug_file:write(" Simulation Controls\n")
				elseif dev.usage_page == 3 then
					debug_file:write(" VR Controls\n")
				elseif dev.usage_page == 4 then
					debug_file:write(" Sport Controls\n")
				elseif dev.usage_page == 5 then
					debug_file:write(" Game Controls\n")
				elseif dev.usage_page == 6 then
					debug_file:write(" Generic Device Controls\n")
				elseif dev.usage_page == 7 then
					debug_file:write(" Keyboard/Keypad\n")
				elseif dev.usage_page == 8 then
					debug_file:write(" LEDs\n")
				elseif dev.usage_page == 9 then
					debug_file:write(" Button\n")
				elseif dev.usage_page == 10 then
					debug_file:write(" Ordinal\n")
				elseif dev.usage_page == 11 then
					debug_file:write(" Telephony\n")
				elseif dev.usage_page == 12 then
					debug_file:write(" Consumer\n")
				elseif dev.usage_page == 13 then
					debug_file:write(" Digitizer\n")
				elseif dev.usage_page == 15 then
					debug_file:write(" PID Page\n")
				elseif dev.usage_page == 144 then
					debug_file:write(" Camera Control Page\n")
				elseif dev.usage_page == 145 then
					debug_file:write(" Arcade Page\n")
				elseif dev.usage_page >= 65280 then
					debug_file:write(" Vendor-defined\n")
				else
					debug_file:write("\n")
				end
            debug_file:write(string.format("ALL_HID_DEVICES[%i].usage               = %i (%#x)", i, dev.usage, dev.usage))
				if dev.usage_page == 1 then
					if dev.usage == 1 then
						debug_file:write(" Pointer\n")
					elseif dev.usage == 2 then
						debug_file:write(" Mouse\n")
					elseif dev.usage == 4 then
						debug_file:write(" Joystick\n")
					elseif dev.usage == 5 then
						debug_file:write(" Game Pad\n")
					elseif dev.usage == 6 then
						debug_file:write(" Keyboard\n")
					elseif dev.usage == 7 then
						debug_file:write(" Keypad\n")
					elseif dev.usage == 8 then
						debug_file:write(" Multi-axis Controller\n")
					elseif dev.usage == 58 then
						debug_file:write(" Counted Buffer\n")
					elseif dev.usage == 128 then
						debug_file:write(" System Control\n")
					else
						debug_file:write("\n")
					end
				else
					debug_file:write("\n")
				end
            debug_file:write(string.format("ALL_HID_DEVICES[%i].path                = %s\n", i, dev.path))
            debug_file:write(string.format("ALL_HID_DEVICES[%i].serial_number       = %s\n", i, dev.serial_number))
            debug_file:write(string.format("ALL_HID_DEVICES[%i].manufacturer_string = %s\n", i, dev.manufacturer_string))
            debug_file:write(string.format("ALL_HID_DEVICES[%i].product_string      = %s\n", i, dev.product_string))
            local device_test = hid_open_path(ALL_HID_DEVICES[i].path)
            if device_test == nil then
                debug_file:write(string.format("ALL_HID_DEVICES[%i] can't be opened by FlyWithLua.\n", i))
            else
                debug_file:write(string.format("ALL_HID_DEVICES[%i] can be opened by FlyWithLua.\n", i))
                hid_close(device_test)
            end
        end
	debug_file:write("\n\n*** Checksum of all Lua files in Scripts directory ***\n")
	scriptfiles = directory_to_table(SCRIPT_DIRECTORY)
	for i,filename in ipairs(scriptfiles) do
		local file_to_parse = io.open( SCRIPT_DIRECTORY .. filename )
		local number_of_lines = 0
		local file_content = ""
		if file_to_parse ~= nil and (string.lower(string.sub(filename, -4)) == ".lua" or string.lower(string.sub(filename, -4)) == ".fwl") then
			for lines in file_to_parse:lines() do
				number_of_lines = number_of_lines + 1
				file_content = file_content .. lines .. "\n"
			end
			debug_file:write(string.format("%s = %s (%i lines)\n", filename, md5(file_content), number_of_lines))
			file_to_parse:close()
		end
	end
	debug_file:write("\n\n*** All lines containing FlyWithLua and some other information from X-Plane's Log.txt ***\n")
	local Log_txt = io.open("Log.txt")
	if Log_txt ~= nil then
		local number_of_lines = 0
		local reached_scenery_info = false
        local line_counter = 0
		for lines in Log_txt:lines() do
			number_of_lines = number_of_lines + 1
			if string.find(lines, "found the following scenery packages") ~= nil then
				reached_scenery_info = true
			end
			if not reached_scenery_info and number_of_lines < 100 then
				debug_file:write(string.format("[%06i] %s\n", number_of_lines, lines))
			else
                if line_counter > 0 then
                    debug_file:write(string.format("[%06i] %s\n", number_of_lines, lines))
                    line_counter = line_counter - 1
                end
				local found_interesting_line = false
				if string.find(lines, "FlyWithLua") ~= nil then
					found_interesting_line = true
				end
				if string.find(lines, "Loaded:") ~= nil then
					found_interesting_line = true
				end
				if string.find(string.lower(lines), "warning:") ~= nil then
					found_interesting_line = true
				end
				if string.find(lines, "Failed:") ~= nil then
					found_interesting_line = true
				end
				if string.find(lines, "I/JOY") ~= nil then
					found_interesting_line = true
				end
				if string.find(lines, "D/HID") ~= nil then
					found_interesting_line = true
				end
				if string.find(lines, "I/ACF") ~= nil then
					found_interesting_line = true
				end
				if found_interesting_line then
					-- we already show the line if line_counter is above zero
                    if line_counter < 1 then
                        debug_file:write(string.format("[%06i] %s\n", number_of_lines, lines))
                    end
                    -- also show the following 10 lines
                    line_counter = 9
				end
			end
		end
		Log_txt:close()
	end
	debug_file:write("\n\n*** History of code you entered directly into FlyWithLua ***\n")
	if number_of_code_lines_in_history > 0 then
		for i = 1, number_of_code_lines_in_history do
			debug_file:write(code_line_history[i] .. '\n')
		end
	end
    -- end
    debug_file:close()
end

-- run a helper script to write default assignments into a file
if LUA_RUN == 1 then
    dofile(INTERNALS_DIRECTORY .. "SaveInitialAssignments.ini")
end

-- run a helper script to define function bubble()
dofile(INTERNALS_DIRECTORY .. "bubbles.lua")

-- run a helper script to enter some Lua code in X-Plane
dofile(INTERNALS_DIRECTORY .. "EnterLineOfCode.lua")

-- run the user init file
dofile(PLUGIN_MAIN_DIRECTORY .. "/user.ini")

-- run some nice scripts helping to use FlyWithLua
dofile(INTERNALS_DIRECTORY .. "show pilots head info.lua")
dofile(INTERNALS_DIRECTORY .. "button_sniffer.lua")
dofile(INTERNALS_DIRECTORY .. "keystroke_sniffer.lua")
dofile(INTERNALS_DIRECTORY .. "memory heartbeat.lua")

-- provide a function for code execution on exit
DO_ON_EXIT_LUA_CODE = "-- Never touch this variable or FylWithLua will crash!\n-- Use the function do_on_exit() to execute code when Lua stops."

function do_on_exit( code_string )
    DO_ON_EXIT_LUA_CODE = DO_ON_EXIT_LUA_CODE .. "\n" .. code_string
end
