-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- --                                                                                                 -- --
-- --      D               ''  T                    D    II    T      !!                              -- --
-- --      D               ''  T           EE       D          T      !!                              -- --
-- --    DDD   OO   N NN      TTT         E  E    DDD    II   TTT     !!                              -- --
-- --   D  D  O  O  NN  N      T          EEE    D  D     I    T      !!                              -- --
-- --   D  D  O  O  N   N      T          E      D  D     I    T                                      -- --
-- --    DDD   OO   N   N       TT         EEE    DDD      I    TT    !!                              -- --
-- --                                                                                                 -- --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- SaveInitialAssignments.ini version 2.7.33 build 2022-03-01
-- Support for X-Plane 11.55r2+

function save_initial_assignments()
    -- first we have to open a textfile for writing
    local textfile
	textfile = io.open(PLUGIN_MAIN_DIRECTORY .. "/initial_assignments.txt", "w")
    
    -- now we can read and write the axis assignments, the code is taken from the old 1.x script
	-- X-Plane only stores an integer to represent the function, we use a table to give it a name
	local axis_functions = { "pitch", "roll", "yaw", "throttle", "collective", "left toe brake", "right toe brake", "prop",
	"mixture", "carb heat", "flaps", "thrust vector", "wing sweep", "speedbrakes", "displacement",
	"reverse", "elev trim", "ailn trim", "rudd trim", "throttle 1", "throttle 2", "throttle 3",
	"throttle 4", "prop 1", "prop 2", "prop 3", "prop 4", "mixture 1", "mixture 2",
	"mixture 3", "mixture 4", "reverse 1", "reverse 2", "reverse 3", "reverse 4", "landing gear",
	"nosewheel tiller", "backup throttle", "cowl flaps", "none", "view left/right", "view up/down", "view zoom",
	"camera left/right", "camera up/down", "camera zoom", "gun/bomb left/right", "gun/bomb up/down",
	"VR Touchpad X", "VR Touchpad Y", "VR Trigger"}

	-- now we can write the axis config to the Log.txt file
	textfile:write("-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n")
	textfile:write("-- --  FlyWithLua: SaveInitialAssignments.ini version 2.7.4 build 2018-10-04  -- --\n")
	textfile:write("-- --  The initial assignments are stored in this file. -- --- -- -- -- -- -- -- --\n")
	textfile:write("-- -- 8<  -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n\n")
	textfile:write("clear_all_axis_assignments()\n")

	-- make the variables local to keep Lua clean
	local i
	local axis_function_index
	local axis_reverse
	
    -- X-Plane 11.25r2+ has 499 number of axis
    local max_axis_number = 499

	-- look into all axis
	for i = 0, max_axis_number do
		-- pull the index to the function name from X-Plane
		axis_function_index = get( "sim/joystick/joystick_axis_assignments", i )
		-- pull the reverse info from X-Plane
		-- the value is 0, if the axis is normal, but is the number of the axis, if the axis is reverse
		if get( "sim/joystick/joystick_axis_reverse", i ) > 0 then
			axis_reverse = "reverse"
		else
			axis_reverse = "normal"
		end
		-- we do not need to kill axis twice, this was already done by clear_all_axis_assignments()
		if axis_function_index > 0 then
			if (axis_functions[axis_function_index] == nil) then
				textfile:write( "set_axis_assignment( " .. i .. ', nil, "' .. axis_reverse .. '" )\n' )
			else
				textfile:write( "set_axis_assignment( " .. i .. ', "' .. axis_functions[axis_function_index] .. '", "' .. axis_reverse .. '" )\n' )
			end
		end
	end
    
    -- now we will write the button assignments
    textfile:write("\nclear_all_button_assignments()\n")
    
    -- read the information from X-Plane's own settings
    local xplanefile
	xplanefile = SYSTEM_DIRECTORY .. "Output/preferences/X-Plane Joystick Settings.prf"

    local number
    local sticknumber
    local stickindex
    local commandstring
    local linestring
    local separator_position
    -- X-Plane 11.10 has increased number of buttons per joystick to 160     
    for linestring in io.lines(xplanefile) do    
      if string.find(linestring, "_joy_BUTN_use", 1, true) == 1 then
        separator_position = string.find(linestring, " ", 1, true)
        number = tonumber(string.sub(linestring, 14, separator_position-1))
        -- if we have a description line (X-Plane 11 only), we need to adjust the value of number
        if number == nil then
            number = tonumber(string.sub(linestring, 19, separator_position-1))
        end
        commandstring = string.sub(linestring, separator_position+1, -1)     -- we do not want the \n
        -- reformat the number to (n*40) + i
        sticknumber = math.floor(number / 160)
        stickindex = number - (sticknumber*160)
        -- check if it is useful and write it to the config textfile
        if commandstring ~= "sim/none/none" then
            textfile:write("set_button_assignment( (" .. sticknumber .. '*160) + ' .. stickindex .. ', "' .. commandstring .. '" )\n')
        end
      end
    end

    -- some DataRefs who should be set too
    textfile:write("\n-- setting nullzone, sensitivity and augment\n")
    textfile:write(string.format('set( "sim/joystick/joystick_pitch_nullzone",      %1.3f )\n', get("sim/joystick/joystick_pitch_nullzone")))
    textfile:write(string.format('set( "sim/joystick/joystick_roll_nullzone",       %1.3f )\n', get("sim/joystick/joystick_roll_nullzone")))
    textfile:write(string.format('set( "sim/joystick/joystick_heading_nullzone",    %1.3f )\n', get("sim/joystick/joystick_heading_nullzone")))
    textfile:write(string.format('set( "sim/joystick/joystick_pitch_sensitivity",   %1.3f )\n', get("sim/joystick/joystick_pitch_sensitivity")))
    textfile:write(string.format('set( "sim/joystick/joystick_roll_sensitivity",    %1.3f )\n', get("sim/joystick/joystick_roll_sensitivity")))
    textfile:write(string.format('set( "sim/joystick/joystick_heading_sensitivity", %1.3f )\n', get("sim/joystick/joystick_heading_sensitivity")))
    if SDK_VERSION > 303 then
    
    else
        textfile:write(string.format('set( "sim/joystick/joystick_pitch_augment",       %1.3f )\n', get("sim/joystick/joystick_pitch_augment")))
        textfile:write(string.format('set( "sim/joystick/joystick_roll_augment",        %1.3f )\n', get("sim/joystick/joystick_roll_augment")))
        textfile:write(string.format('set( "sim/joystick/joystick_heading_augment",     %1.3f )\n', get("sim/joystick/joystick_heading_augment")))
    end
    
    -- finish
	textfile:write("\n-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- >8 -- --\n\n")  
    textfile:write(string.format('-- PLANE_ICAO == "%s"\n', PLANE_ICAO))
    textfile:write(string.format('-- PLANE_TAILNUMBER == "%s"\n', PLANE_TAILNUMBER))
    textfile:write(string.format('-- AIRCRAFT_FILENAME == "%s"\n', AIRCRAFT_FILENAME))
    textfile:close()
end

we_did_it, error_message = pcall(save_initial_assignments)

if we_did_it then
    logMsg("FlyWithLua Info: Initial assignments successfully saved.")
else
    logMsg("FlyWithLua Error: Unable to write initial assignments file.")
    logMsg("FlyWithLua Error: " .. error_message)
end
